[{"/Users/ravi/Projects/buyorsellstock/buyorsell/src/App.js":"1","/Users/ravi/Projects/buyorsellstock/buyorsell/src/index.js":"2","/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/StockDetailPage/StockDetailsPage.js":"3","/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/ErrorComponent/ErrorComponent.js":"4","/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/Search/Search.js":"5","/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/GraphComponent/GraphComponent.js":"6","/Users/ravi/Projects/buyorsellstock/buyorsell/src/stocksData.js":"7","/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/ChatComponent/ChatComponent.js":"8","/Users/ravi/Projects/buyorsellstock/buyorsell/src/FirebaseFunctions/firebase.utils.js":"9"},{"size":769,"mtime":1611378209818,"results":"10","hashOfConfig":"11"},{"size":500,"mtime":1611333655245,"results":"12","hashOfConfig":"11"},{"size":571,"mtime":1611333655244,"results":"13","hashOfConfig":"11"},{"size":543,"mtime":1611378209818,"results":"14","hashOfConfig":"11"},{"size":2241,"mtime":1611404402452,"results":"15","hashOfConfig":"11"},{"size":12178,"mtime":1611333655241,"results":"16","hashOfConfig":"11"},{"size":157537,"mtime":1611333655247,"results":"17","hashOfConfig":"11"},{"size":3217,"mtime":1611404547404,"results":"18","hashOfConfig":"11"},{"size":2457,"mtime":1611333655244,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"eidce5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ravi/Projects/buyorsellstock/buyorsell/src/App.js",[],["42","43"],"/Users/ravi/Projects/buyorsellstock/buyorsell/src/index.js",[],"/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/StockDetailPage/StockDetailsPage.js",[],"/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/ErrorComponent/ErrorComponent.js",[],"/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/Search/Search.js",["44","45"],"import React, { useState, useEffect } from \"react\"\nimport { firestore } from \"../../FirebaseFunctions/firebase.utils\"\nimport { stocksData } from \"../../stocksData\"\nimport { Link } from \"react-router-dom\"\n\nimport \"./Search.css\";\n\nconst Search = () => {\n\n\n    const allStocksData = stocksData\n    const [searchQuery, setSearchQuery] = useState(\"\")\n    const [searchedData, setSearchedData] = useState([])\n\n    // const fetchStocksData = async () => {\n    //     let localStocksData = []\n    //     let reference = await firestore.collection('StocksData').get()\n    //     reference.forEach(item => {\n    //         localStocksData.push(item.data())\n    //     })\n    //     setStocksData(localStocksData)\n    // }\n\n    useEffect(() => {\n        console.log(22, allStocksData.length)\n    },[])\n\n    const handleSearchQueryChange = e => {\n        let query = e.target.value\n        setSearchQuery(query)\n\n        if(query.length > 0) {\n            const filteredItems = allStocksData.filter(item => (item.SYMBOL.toLowerCase().startsWith(query.toLowerCase()) || item['NAME OF COMPANY'].toLowerCase().startsWith(query.toLowerCase())))\n            setSearchedData(filteredItems)\n            // console.log(32, filteredItems)\n        } else {\n            setSearchedData([])\n        }\n    }\n\n\n    return (\n        <div>\n            <div className=\"searchBlock\">\n                <input type=\"text\" placeholder=\"Search for a stock...\" className=\"searchBox\" onChange={handleSearchQueryChange} value={searchQuery}/>\n                <div>\n                    { searchedData.length>0 && \n                        searchedData.map((item, index) => {\n                            return (\n                                <Link to={\"/stocks/\"+item.SYMBOL} target=\"_blank\" className=\"stockRedirectLink\">\n                                    <div key={index} className='searchSuggestion'>\n                                        { item.SYMBOL }<span className='companyName'>{ item['NAME OF COMPANY'] }</span>\n                                    </div>\n                                </Link>\n                            )\n                        })    \n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Search;","/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/GraphComponent/GraphComponent.js",["46","47","48","49","50","51","52"],"import React, { useState, useEffect } from \"react\";\nimport DonutChart from 'react-donut-chart';\nimport { createStockDocument , firestore } from \"../../FirebaseFunctions/firebase.utils\";\nimport { useToasts } from 'react-toast-notifications';\n\nimport \"./GraphComponent.css\"\n\nconst GraphComponent = ({ stockName }) => {\n\n    const [userChoiceFromStorage, setUserChoiceFromStorage] = useState({})\n    const [buttonClicked, setButtonClicked] = useState(false)\n    const [buyValue, setBuyValue] = useState(0)\n    const [sellValue, setSellValue] = useState(0)\n    const [holdValue, setHoldValue] = useState(0)\n    const [userChoice, setUserChoice] = useState([])\n\n    const { addToast } = useToasts()\n\n    useEffect(() => {\n        createStockDocument(stockName)\n    },[])\n\n    const [sessionId, setSessionId] = useState(\"\")\n    //Session ID code block ----- CAN BE REMOVED\n        const generateSessionId = () => {\n            const now = new Date()\n\n            setSessionId(now.getTime())\n        }\n\n        useEffect(() => {\n            generateSessionId()\n            console.log(19, sessionId)\n        },[])\n\n        useEffect(() => {\n            const interval = setInterval(() => {\n                generateSessionId()\n            },[90000])\n\n            return () => clearInterval(interval)\n        },[])\n    //End of sessionid block\n\n    const getPercentDetailsFirestore = async () => {\n\n            let reference = await firestore.collection('stockDetails').where('stockName','==',stockName).get()\n            reference.forEach(item => {\n                setBuyValue(item.data().buyPercent)\n                setSellValue(item.data().sellPercent)\n                setHoldValue(item.data().holdPercent)\n            })\n\n            //Retrieving the chart data on every snapshot change\n            firestore.collection('stockDetails').where('stockName','==', stockName).onSnapshot(querySnapshot => {\n                querySnapshot.docChanges().forEach(change => {\n                    setBuyValue(change.doc.data().buyPercent)\n                    setSellValue(change.doc.data().sellPercent)\n                    setHoldValue(change.doc.data().holdPercent)\n                });\n            })        \n    }\n\n    //This is to update the page on the page load\n    useEffect(() => {\n        getPercentDetailsFirestore()\n    },[])\n\n    const notify = () => addToast(\"Duplicate vote!\\nTry choosing other options if you change you view about this stock\", { appearance : 'error', autoDismiss: true })\n\n    const handleBuySellHoldButtonClick = async e => {\n        \n        let buttonValue = e.target.value\n        console.log(47, e.target.className)\n        let buttonClassName = e.target.className\n        if(buttonClassName.split(\" \").includes(\"disabled\")) {\n            notify()\n        } else {\n            if(buttonValue === \"Buy\") {\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\n                    console.log(140, oldValueInLocalStorage)\n\n                    //Checking for the old choice\n                    oldValueInLocalStorage.action === \"SELL\"\n                        ?\n                    (await firestore.doc(`/stockDetails/${stockName}`).update({\n                        sellPercent : sellValue - 1\n                    }))\n                        :\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        holdPercent : holdValue - 1\n                    })\n                    //End of check\n\n                    setBuyValue(buyValue + 1)\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'BUY', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        buyPercent : buyValue + 1\n                    })\n                    setButtonClicked(true)\n                    setButtonClicked(false)\n                } else {\n                    setBuyValue(buyValue + 1)\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'BUY', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        buyPercent : buyValue + 1\n                    })\n                    setButtonClicked(true)\n                    setButtonClicked(false)                    \n                }\n                \n            } else if(buttonValue === \"Sell\") {\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\n                    console.log(140, oldValueInLocalStorage)\n\n\n                    //Checking for the old choice\n                    oldValueInLocalStorage.action === \"BUY\"\n                        ?\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        buyPercent : buyValue - 1\n                    })\n                        :\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        holdPercent : holdValue - 1\n                    })\n                    //End of check\n\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'SELL', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        sellPercent : sellValue + 1\n                    })\n                    setButtonClicked(true)\n                    setButtonClicked(false)\n                } else {\n                    setSellValue(sellValue + 1)\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'SELL', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        sellPercent : sellValue + 1\n                    })\n                    setButtonClicked(true)\n                    setButtonClicked(false)\n                }\n                \n                \n            } else {                \n                if(localStorage.getItem(`STOCK-${stockName}`)) {\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\n                    console.log(140, oldValueInLocalStorage)\n\n                    //Checking for the old choice\n                    oldValueInLocalStorage.action === \"BUY\" \n                        ? \n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        buyPercent : buyValue - 1\n                    })\n                        :\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        sellPercent : sellValue - 1\n                    })\n                    //End of check\n\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'HOLD', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        holdPercent : holdValue + 1\n                    })\n                    setButtonClicked(true)\n                    setButtonClicked(false)\n                } else {\n                    // setHoldValue(holdValue + 1)\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'HOLD', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\n\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\n                        holdPercent : holdValue + 1\n                    })\n                    setButtonClicked(true)\n                    setButtonClicked(false)\n                }\n                \n            }\n        }\n        setButtonClicked(false)   \n    }\n\n    //Deleting elements from localstorage based on the expiry key\n    const deleteFromLocalStorage = () => {\n        \n        console.log(\"Starting\", 205)\n        let stockListFromLocalStorage = []\n\n        for(let i in localStorage){\n            if(i.startsWith(\"STOCK\")) {\n                stockListFromLocalStorage.push(i)\n            }\n        }\n        if(stockListFromLocalStorage.length > 0) {\n            stockListFromLocalStorage.forEach(item => {\n                if(JSON.parse(localStorage[item]).expiry < new Date().getTime() ) {\n                    localStorage.removeItem(item)\n                }\n            })\n        }\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            deleteFromLocalStorage()\n        },60000)\n\n        return () => clearInterval(interval)\n    },[])\n\n\n    //GETTING USER CHOICE FROM LOCAL STORAGE\n    const getUserChoiceFromStorage = () => {\n        let storageData = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\n        setUserChoiceFromStorage(storageData)  // SETUSERCHOICE IS A STATE CONTAINER; GETUSERCHOICE IS A FUNCTION\n    }\n\n    useEffect(() => {\n        let storageData = localStorage.getItem(`STOCK-${stockName}`)\n        if(!storageData) {\n            setUserChoiceFromStorage({})\n        } else {\n            setUserChoiceFromStorage(JSON.parse(storageData))\n        }\n    },[])\n\n    useEffect(() => {\n        if(buttonClicked) {\n            getUserChoiceFromStorage()\n        }\n    },[buttonClicked])\n \n    const totalValue = buyValue + sellValue + holdValue\n\n    const buyPercent = buyValue > 0 ? parseFloat(((buyValue/totalValue)* 100).toFixed(2)) :  0\n    const sellPercent = sellValue > 0 ? parseFloat(((sellValue/totalValue)* 100).toFixed(2)) : 0\n    const holdPercent = holdValue > 0 ? parseFloat(((holdValue/totalValue)* 100).toFixed(2)) : 0\n\n    let displayBuyButton = \n        (userChoiceFromStorage.stockName !== stockName \n            || \n        ((userChoiceFromStorage.action !== \"BUY\" ) && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\n        ? true : false\n    \n    let displaySellButton = \n        (userChoiceFromStorage.stockName !== stockName \n            || \n        ((userChoiceFromStorage.action !== \"SELL\") && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\n        ? true : false\n\n    let displayHoldButton = \n        (userChoiceFromStorage.stockName !== stockName \n            || \n        ((userChoiceFromStorage.action !== \"HOLD\") && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\n        ? true : false\n\n    return (\n        <div>\n                    {/* Donut chart */}\n                    <DonutChart \n                        data = {[\n                            {\n                                label: 'Buy',\n                                value: buyPercent\n                            },\n                            {\n                                label: 'Sell',\n                                value: sellPercent\n                            },\n                            {\n                                label: 'Hold',\n                                value: holdPercent\n                            }\n                        ]}\n                        colors = {['#2a9d8f' , '#e76f51', '#e9c46a']}\n                        onMouseEnter = {() => false}\n                    />\n                    <div className=\"buttonBlock\"> \n                        <button onClick={handleBuySellHoldButtonClick} value=\"Buy\" className={displayBuyButton ? \"buyButton\" : \"buyButton disabled\"}>Buy</button>\n\n                        <button onClick={handleBuySellHoldButtonClick} value=\"Sell\" className={displaySellButton ? \"sellButton\" : \"sellButton disabled\"}>Sell</button>\n\n                        <button onClick={handleBuySellHoldButtonClick} value=\"Hold\" className={displayHoldButton ? \"holdButton\" : \"holdButton disabled\"}>Hold</button>\n\n                    </div>\n                </div>\n    )\n}\n\nexport default GraphComponent;","/Users/ravi/Projects/buyorsellstock/buyorsell/src/stocksData.js",[],"/Users/ravi/Projects/buyorsellstock/buyorsell/src/Components/ChatComponent/ChatComponent.js",["53","54"],"import React,{ useState, useEffect, createRef } from \"react\"\nimport firebase from \"firebase/app\";\nimport { firestore } from \"../../FirebaseFunctions/firebase.utils\"\n// import { IoIosArrowDropup } from \"react-icons/io\"\n\nimport \"./ChatComponent.css\"\n\nconst ChatComponent = ({ stockName }) => {\n    \n    const [currentMessage, setCurrentMessage] = useState(\"\")\n    const [allMessages, setAllMessages] = useState([])\n\n\n    //This ref is attached to the div in chatMessage block below\n    const messagesEndRef = createRef()\n\n    useEffect(() => {\n        scrollToBottom()\n    },[allMessages])\n\n    const scrollToBottom = () => {\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\n    }\n    //End of ref\n\n    // //Start ref\n    // const messageStartRef = createRef()\n\n    // const scrollTop = () => {\n    //     messageStartRef.current.scrollIntoView({ behavior: 'smooth' })\n    // }\n    // //End of the start ref\n    \n    const handleMessageChange = e => {\n        let message = e.target.value\n        setCurrentMessage(message)\n    }\n\n    const handleSendMessage = async () => {\n        setAllMessages([...allMessages, currentMessage])\n        setCurrentMessage(\"\")\n\n        await firestore.doc(`/stockDetails/${stockName}`).update({\n            chatMessages : firebase.firestore.FieldValue.arrayUnion(currentMessage)\n        })\n    }\n    \n    const getMessagesFromFirestore = async () => {\n        \n        //Retrieving the messages on page load\n        let reference = await firestore.collection('stockDetails').where('stockName','==',stockName).get()\n        reference.forEach(item => {\n            setAllMessages(item.data().chatMessages)\n        })\n\n        //Retrieving the messages on every snapshot change\n        firestore.collection('stockDetails').where('stockName','==', stockName).onSnapshot(querySnapshot => {\n            querySnapshot.docChanges().forEach(change => {\n                setAllMessages(change.doc.data().chatMessages)\n              });\n        })\n    }\n\n    useEffect(() => {\n        getMessagesFromFirestore()\n    },[])\n\n    return (\n        <div>\n            <div className=\"chatBlock\">\n                {/* <p className=\"chatTitle\">{stockName} discussion</p> */}\n                <div className=\"chatMessages\">\n                    {/* <div ref={messageStartRef} /> */}\n                    {allMessages && allMessages.map((message, index) => {\n                        return (\n                            <div key={index} className=\"singleMessage\">\n                                <p>{message}</p>\n                            </div>\n                        )\n                    })}\n                    {/* <button onClick={scrollTop} className=\"goTopButton\"><IoIosArrowDropup /></button> */}\n                    <div ref={messagesEndRef} />\n                </div>\n                <div className=\"chatSendBlock\">\n                    <input type=\"text\" placeholder=\"enter your message here\" onChange={handleMessageChange} value={currentMessage} className=\"chatSendBlock-input\"/>\n                    <button onClick={handleSendMessage} className=\"chatSendBlock-send\">Send</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatComponent;","/Users/ravi/Projects/buyorsellstock/buyorsell/src/FirebaseFunctions/firebase.utils.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":26,"column":7,"nodeType":"65","endLine":26,"endColumn":9,"suggestions":"66"},{"ruleId":"59","severity":1,"message":"67","line":15,"column":12,"nodeType":"61","messageId":"62","endLine":15,"endColumn":22},{"ruleId":"59","severity":1,"message":"68","line":15,"column":24,"nodeType":"61","messageId":"62","endLine":15,"endColumn":37},{"ruleId":"63","severity":1,"message":"69","line":21,"column":7,"nodeType":"65","endLine":21,"endColumn":9,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"71","line":34,"column":11,"nodeType":"65","endLine":34,"endColumn":13,"suggestions":"72"},{"ruleId":"63","severity":1,"message":"73","line":67,"column":7,"nodeType":"65","endLine":67,"endColumn":9,"suggestions":"74"},{"ruleId":"63","severity":1,"message":"69","line":229,"column":7,"nodeType":"65","endLine":229,"endColumn":9,"suggestions":"75"},{"ruleId":"63","severity":1,"message":"76","line":235,"column":7,"nodeType":"65","endLine":235,"endColumn":22,"suggestions":"77"},{"ruleId":"63","severity":1,"message":"78","line":19,"column":7,"nodeType":"65","endLine":19,"endColumn":20,"suggestions":"79"},{"ruleId":"63","severity":1,"message":"80","line":66,"column":7,"nodeType":"65","endLine":66,"endColumn":9,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'firestore' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allStocksData.length'. Either include it or remove the dependency array.","ArrayExpression",["84"],"'userChoice' is assigned a value but never used.","'setUserChoice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stockName'. Either include it or remove the dependency array.",["85"],"React Hook useEffect has a missing dependency: 'sessionId'. Either include it or remove the dependency array.",["86"],"React Hook useEffect has a missing dependency: 'getPercentDetailsFirestore'. Either include it or remove the dependency array.",["87"],["88"],"React Hook useEffect has a missing dependency: 'getUserChoiceFromStorage'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["90"],"React Hook useEffect has a missing dependency: 'getMessagesFromFirestore'. Either include it or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"94","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [allStocksData.length]",{"range":"107","text":"108"},"Update the dependencies array to be: [stockName]",{"range":"109","text":"110"},"Update the dependencies array to be: [sessionId]",{"range":"111","text":"112"},"Update the dependencies array to be: [getPercentDetailsFirestore]",{"range":"113","text":"114"},{"range":"115","text":"110"},"Update the dependencies array to be: [buttonClicked, getUserChoiceFromStorage]",{"range":"116","text":"117"},"Update the dependencies array to be: [allMessages, scrollToBottom]",{"range":"118","text":"119"},"Update the dependencies array to be: [getMessagesFromFirestore]",{"range":"120","text":"121"},[787,789],"[allStocksData.length]",[762,764],"[stockName]",[1103,1105],"[sessionId]",[2314,2316],"[getPercentDetailsFirestore]",[9481,9483],[9591,9606],"[buttonClicked, getUserChoiceFromStorage]",[573,586],"[allMessages, scrollToBottom]",[2060,2062],"[getMessagesFromFirestore]"]