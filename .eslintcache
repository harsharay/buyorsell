[{"F:\\projects\\React\\buyorsell\\src\\index.js":"1","F:\\projects\\React\\buyorsell\\src\\Components\\Search\\Search.js":"2","F:\\projects\\React\\buyorsell\\src\\stocksData.js":"3","F:\\projects\\React\\buyorsell\\src\\Components\\GraphComponent\\GraphComponent.js":"4","F:\\projects\\React\\buyorsell\\src\\Components\\ChatComponent\\ChatComponent.js":"5","F:\\projects\\React\\buyorsell\\src\\FirebaseFunctions\\firebase.utils.js":"6"},{"size":500,"mtime":1610766840482,"results":"7","hashOfConfig":"8"},{"size":2304,"mtime":1611676424252,"results":"9","hashOfConfig":"8"},{"size":164198,"mtime":1610786969638,"results":"10","hashOfConfig":"8"},{"size":13635,"mtime":1611676424247,"results":"11","hashOfConfig":"8"},{"size":4230,"mtime":1612857566478,"results":"12","hashOfConfig":"8"},{"size":2536,"mtime":1611256488493,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1o2rwe0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\projects\\React\\buyorsell\\src\\index.js",[],["28","29"],"F:\\projects\\React\\buyorsell\\src\\Components\\Search\\Search.js",["30","31"],"F:\\projects\\React\\buyorsell\\src\\stocksData.js",[],"F:\\projects\\React\\buyorsell\\src\\Components\\GraphComponent\\GraphComponent.js",["32","33","34","35","36","37","38","39","40","41"],"import React, { useState, useEffect } from \"react\";\r\nimport { createStockDocument , firestore } from \"../../FirebaseFunctions/firebase.utils\";\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport { FaThumbsDown, FaThumbsUp } from \"react-icons/fa\";\r\nimport { MdSentimentNeutral } from \"react-icons/md\";\r\n\r\n\r\nimport \"./GraphComponent.css\"\r\n\r\nconst GraphComponent = ({ stockName }) => {\r\n\r\n    const [userChoiceFromStorage, setUserChoiceFromStorage] = useState({})\r\n    const [buttonClicked, setButtonClicked] = useState(false)\r\n    const [buyValue, setBuyValue] = useState(0)\r\n    const [sellValue, setSellValue] = useState(0)\r\n    const [holdValue, setHoldValue] = useState(0)\r\n    const [userChoice, setUserChoice] = useState([])\r\n\r\n    const { addToast } = useToasts()\r\n\r\n    useEffect(() => {\r\n        createStockDocument(stockName)\r\n    },[])\r\n\r\n    const [sessionId, setSessionId] = useState(\"\")\r\n    //Session ID code block ----- CAN BE REMOVED\r\n        const generateSessionId = () => {\r\n            const now = new Date()\r\n\r\n            setSessionId(now.getTime())\r\n        }\r\n\r\n        useEffect(() => {\r\n            generateSessionId()\r\n            console.log(19, sessionId)\r\n        },[])\r\n\r\n        useEffect(() => {\r\n            const interval = setInterval(() => {\r\n                generateSessionId()\r\n            },[90000])\r\n\r\n            return () => clearInterval(interval)\r\n        },[])\r\n    //End of sessionid block\r\n\r\n    const getPercentDetailsFirestore = async () => {\r\n\r\n            let reference = await firestore.collection('stockDetails').where('stockName','==',stockName).get()\r\n            reference.forEach(item => {\r\n                setBuyValue(parseFloat(item.data().buyPercent))\r\n                setSellValue(parseFloat(item.data().sellPercent))\r\n                setHoldValue(parseFloat(item.data().holdPercent))\r\n                // console.log(\"item.data.hodlPercent\", item.data().holdPercent)\r\n            })\r\n            \r\n\r\n            //Retrieving the chart data on every snapshot change\r\n            firestore.collection('stockDetails').where('stockName','==', stockName).onSnapshot(querySnapshot => {\r\n                querySnapshot.docChanges().forEach(change => {\r\n                    setBuyValue(change.doc.data().buyPercent)\r\n                    setSellValue(change.doc.data().sellPercent)\r\n                    setHoldValue(change.doc.data().holdPercent)\r\n                });\r\n            })        \r\n    }\r\n\r\n    //This is to update the page on the page load\r\n    useEffect(() => {\r\n        getPercentDetailsFirestore()\r\n    },[])\r\n\r\n    const notify = () => addToast(\"Duplicate vote!\\nTry choosing other options if you change you view about this stock\", { appearance : 'error', autoDismiss: true })\r\n\r\n    const handleBuySellHoldButtonClick = async e => {\r\n        \r\n        let buttonValue = e.target.value\r\n        console.log(47, e.target.className)\r\n        let buttonClassName = e.target.className\r\n        if(buttonClassName.split(\" \").includes(\"disabled\")) {\r\n            notify()\r\n        } else {\r\n            if(buttonValue === \"Buy\") {\r\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\r\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n                    console.log(140, oldValueInLocalStorage)\r\n\r\n                    //Checking for the old choice\r\n                    oldValueInLocalStorage.action === \"SELL\"\r\n                        ?\r\n                    (await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue - 1\r\n                    }))\r\n                        :\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue - 1\r\n                    })\r\n                    //End of check\r\n\r\n                    setBuyValue(buyValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'BUY', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                } else {\r\n                    setBuyValue(buyValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'BUY', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)                    \r\n                }\r\n                \r\n            } else if(buttonValue === \"Sell\") {\r\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\r\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n                    console.log(140, oldValueInLocalStorage)\r\n\r\n\r\n                    //Checking for the old choice\r\n                    oldValueInLocalStorage.action === \"BUY\"\r\n                        ?\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue - 1\r\n                    })\r\n                        :\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue - 1\r\n                    })\r\n                    //End of check\r\n\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'SELL', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                } else {\r\n                    setSellValue(sellValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'SELL', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                }\r\n                \r\n                \r\n            } else {                \r\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\r\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n                    console.log(140, oldValueInLocalStorage)\r\n\r\n                    //Checking for the old choice\r\n                    oldValueInLocalStorage.action === \"BUY\" \r\n                        ? \r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue - 1\r\n                    })\r\n                        :\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue - 1\r\n                    })\r\n                    //End of check\r\n\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'HOLD', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                } else {\r\n                    // setHoldValue(holdValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'HOLD', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                }\r\n                \r\n            }\r\n        }\r\n        setButtonClicked(false)   \r\n    }\r\n\r\n    //Deleting elements from localstorage based on the expiry key\r\n    const deleteFromLocalStorage = () => {\r\n        \r\n        console.log(\"Starting\", 205)\r\n        let stockListFromLocalStorage = []\r\n\r\n        for(let i in localStorage){\r\n            if(i.startsWith(\"STOCK\")) {\r\n                stockListFromLocalStorage.push(i)\r\n            }\r\n        }\r\n        if(stockListFromLocalStorage.length > 0) {\r\n            stockListFromLocalStorage.forEach(item => {\r\n                if(JSON.parse(localStorage[item]).expiry < new Date().getTime() ) {\r\n                    localStorage.removeItem(item)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            deleteFromLocalStorage()\r\n        },60000)\r\n\r\n        return () => clearInterval(interval)\r\n    },[])\r\n\r\n\r\n    //GETTING USER CHOICE FROM LOCAL STORAGE\r\n    const getUserChoiceFromStorage = () => {\r\n        let storageData = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n        setUserChoiceFromStorage(storageData)  // SETUSERCHOICE IS A STATE CONTAINER; GETUSERCHOICE IS A FUNCTION\r\n    }\r\n\r\n    useEffect(() => {\r\n        let storageData = localStorage.getItem(`STOCK-${stockName}`)\r\n        if(!storageData) {\r\n            setUserChoiceFromStorage({})\r\n        } else {\r\n            setUserChoiceFromStorage(JSON.parse(storageData))\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(buttonClicked) {\r\n            getUserChoiceFromStorage()\r\n        }\r\n    },[buttonClicked])\r\n \r\n    const totalValue = buyValue + sellValue + holdValue\r\n\r\n    const buyPercent = buyValue > 0 ? parseFloat(((buyValue/totalValue)* 100).toFixed(2)) :  0\r\n    const sellPercent = sellValue > 0 ? parseFloat(((sellValue/totalValue)* 100).toFixed(2)) : 0\r\n    const holdPercent = holdValue > 0 ? parseFloat(((holdValue/totalValue)* 100).toFixed(2)) : 0\r\n\r\n    let displayBuyButton = \r\n        (userChoiceFromStorage.stockName !== stockName \r\n            || \r\n        ((userChoiceFromStorage.action !== \"BUY\" ) && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\r\n        ? true : false\r\n    \r\n    let displaySellButton = \r\n        (userChoiceFromStorage.stockName !== stockName \r\n            || \r\n        ((userChoiceFromStorage.action !== \"SELL\") && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\r\n        ? true : false\r\n\r\n    let displayHoldButton = \r\n        (userChoiceFromStorage.stockName !== stockName \r\n            || \r\n        ((userChoiceFromStorage.action !== \"HOLD\") && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\r\n    ? true : false\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"minColorBlock\">\r\n                <div className=\"minBlockBuy\">\r\n                    <div className=\"buyColorMin\"></div>\r\n                    <p>BUY: {buyPercent}%</p>\r\n                </div>\r\n                <div className=\"minBlockHold\">\r\n                    <div className=\"holdColorMin\"></div>\r\n                    <p>HOLD: { holdPercent }%</p>\r\n                </div>\r\n                <div className=\"minBlockSell\">\r\n                    <div className=\"selLColorMin\"></div>\r\n                    <p>SELL: { sellPercent }%</p>\r\n                </div>\r\n            </div>\r\n            { (buyPercent > 0 || sellPercent > 0 || holdPercent > 0) ?\r\n                <div className=\"barGraph\">\r\n                    <div className=\"buyBlock\" style={{ width: buyPercent+\"%\" }}>\r\n                        {/* {buyPercent > 0 && <p className=\"barText\">BUY</p> } */}\r\n                        {/* {buyPercent > 0 && <p className=\"barText\">{ buyPercent }%</p> } */}\r\n                    </div>\r\n                    <div className=\"holdBlock\" style={{ width: holdPercent+\"%\" }}>\r\n                        {/* { holdPercent > 0 && <p className=\"barText\">HOLD</p>} */}\r\n                        {/* { holdPercent > 0 && <p className=\"barText\">{ holdPercent }%</p>} */}\r\n                    </div>\r\n                    <div className=\"sellBlock\" style={{ width: sellPercent+\"%\" }}>\r\n                        {/* {sellPercent >0 && <p className=\"barText\">SELL</p>} */}\r\n                        {/* {sellPercent >0 && <p className=\"barText\">{ sellPercent }%</p>} */}\r\n                    </div>\r\n                </div> :\r\n                <div>\r\n                    <p className=\"noVotes-text\">No votes yet! Choose one below</p>\r\n                </div>\r\n                }\r\n            \r\n            <div className=\"buttonBlock\"> \r\n                <button onClick={handleBuySellHoldButtonClick} value=\"Buy\" className={displayBuyButton ? \"buyButton\" : \"buyButton disabled\"}>Buy</button>\r\n                <button onClick={handleBuySellHoldButtonClick} value=\"Hold\" className={displayHoldButton ? \"holdButton\" : \"holdButton disabled\"}>Hold</button>\r\n                <button onClick={handleBuySellHoldButtonClick} value=\"Sell\" className={displaySellButton ? \"sellButton\" : \"sellButton disabled\"}>Sell</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GraphComponent;","F:\\projects\\React\\buyorsell\\src\\Components\\ChatComponent\\ChatComponent.js",["42","43"],"F:\\projects\\React\\buyorsell\\src\\FirebaseFunctions\\firebase.utils.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":10,"nodeType":"50","messageId":"51","endLine":2,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":26,"column":7,"nodeType":"54","endLine":26,"endColumn":9,"suggestions":"55"},{"ruleId":"48","severity":1,"message":"56","line":4,"column":10,"nodeType":"50","messageId":"51","endLine":4,"endColumn":22},{"ruleId":"48","severity":1,"message":"57","line":4,"column":24,"nodeType":"50","messageId":"51","endLine":4,"endColumn":34},{"ruleId":"48","severity":1,"message":"58","line":5,"column":10,"nodeType":"50","messageId":"51","endLine":5,"endColumn":28},{"ruleId":"48","severity":1,"message":"59","line":17,"column":12,"nodeType":"50","messageId":"51","endLine":17,"endColumn":22},{"ruleId":"48","severity":1,"message":"60","line":17,"column":24,"nodeType":"50","messageId":"51","endLine":17,"endColumn":37},{"ruleId":"52","severity":1,"message":"61","line":23,"column":7,"nodeType":"54","endLine":23,"endColumn":9,"suggestions":"62"},{"ruleId":"52","severity":1,"message":"63","line":36,"column":11,"nodeType":"54","endLine":36,"endColumn":13,"suggestions":"64"},{"ruleId":"52","severity":1,"message":"65","line":71,"column":7,"nodeType":"54","endLine":71,"endColumn":9,"suggestions":"66"},{"ruleId":"52","severity":1,"message":"61","line":233,"column":7,"nodeType":"54","endLine":233,"endColumn":9,"suggestions":"67"},{"ruleId":"52","severity":1,"message":"68","line":239,"column":7,"nodeType":"54","endLine":239,"endColumn":22,"suggestions":"69"},{"ruleId":"52","severity":1,"message":"70","line":32,"column":7,"nodeType":"54","endLine":32,"endColumn":20,"suggestions":"71"},{"ruleId":"52","severity":1,"message":"72","line":84,"column":7,"nodeType":"54","endLine":84,"endColumn":9,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'firestore' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allStocksData.length'. Either include it or remove the dependency array.","ArrayExpression",["76"],"'FaThumbsDown' is defined but never used.","'FaThumbsUp' is defined but never used.","'MdSentimentNeutral' is defined but never used.","'userChoice' is assigned a value but never used.","'setUserChoice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stockName'. Either include it or remove the dependency array.",["77"],"React Hook useEffect has a missing dependency: 'sessionId'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'getPercentDetailsFirestore'. Either include it or remove the dependency array.",["79"],["80"],"React Hook useEffect has a missing dependency: 'getUserChoiceFromStorage'. Either include it or remove the dependency array.",["81"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["82"],"React Hook useEffect has a missing dependency: 'getMessagesFromFirestore'. Either include it or remove the dependency array.",["83"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"86","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [allStocksData.length]",{"range":"99","text":"100"},"Update the dependencies array to be: [stockName]",{"range":"101","text":"102"},"Update the dependencies array to be: [sessionId]",{"range":"103","text":"104"},"Update the dependencies array to be: [getPercentDetailsFirestore]",{"range":"105","text":"106"},{"range":"107","text":"102"},"Update the dependencies array to be: [buttonClicked, getUserChoiceFromStorage]",{"range":"108","text":"109"},"Update the dependencies array to be: [allMessages, scrollToBottom]",{"range":"110","text":"111"},"Update the dependencies array to be: [getMessagesFromFirestore]",{"range":"112","text":"113"},[812,814],"[allStocksData.length]",[853,855],"[stockName]",[1207,1209],"[sessionId]",[2583,2585],"[getPercentDetailsFirestore]",[9912,9914],[10028,10043],"[buttonClicked, getUserChoiceFromStorage]",[1000,1013],"[allMessages, scrollToBottom]",[2656,2658],"[getMessagesFromFirestore]"]