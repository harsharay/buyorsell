[{"F:\\projects\\React\\buyorsell\\src\\App.js":"1","F:\\projects\\React\\buyorsell\\src\\Components\\Search\\Search.js":"2","F:\\projects\\React\\buyorsell\\src\\Components\\Home\\Home.js":"3","F:\\projects\\React\\buyorsell\\src\\FirebaseFunctions\\firebase.utils.js":"4","F:\\projects\\React\\buyorsell\\src\\reportWebVitals.js":"5","F:\\projects\\React\\buyorsell\\src\\stocksData.js":"6","F:\\projects\\React\\buyorsell\\src\\Components\\StockDetailPage\\StockDetailsPage.js":"7","F:\\projects\\React\\buyorsell\\src\\index.js":"8","F:\\projects\\React\\buyorsell\\src\\Components\\ChatComponent\\ChatComponent.js":"9","F:\\projects\\React\\buyorsell\\src\\Components\\GraphComponent\\GraphComponent.js":"10","F:\\projects\\React\\buyorsell\\src\\Components\\ErrorComponent\\ErrorComponent.js":"11"},{"size":816,"mtime":1611415290426,"results":"12","hashOfConfig":"13"},{"size":2116,"mtime":1611170734709,"results":"14","hashOfConfig":"13"},{"size":248,"mtime":1610778786405,"results":"15","hashOfConfig":"13"},{"size":2536,"mtime":1611256488493,"results":"16","hashOfConfig":"13"},{"size":362,"mtime":1610766840482,"results":"17","hashOfConfig":"13"},{"size":164198,"mtime":1610786969638,"results":"18","hashOfConfig":"13"},{"size":1131,"mtime":1611418181235,"results":"19","hashOfConfig":"13"},{"size":500,"mtime":1610766840482,"results":"20","hashOfConfig":"13"},{"size":3301,"mtime":1611257165811,"results":"21","hashOfConfig":"13"},{"size":12471,"mtime":1611330128254,"results":"22","hashOfConfig":"13"},{"size":561,"mtime":1611337437874,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o2rwe0",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\projects\\React\\buyorsell\\src\\App.js",[],"F:\\projects\\React\\buyorsell\\src\\Components\\Search\\Search.js",["51","52"],"import React, { useState, useEffect } from \"react\"\r\nimport { firestore } from \"../../FirebaseFunctions/firebase.utils\"\r\nimport { stocksData } from \"../../stocksData\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport \"./Search.css\";\r\n\r\nconst Search = () => {\r\n\r\n\r\n    const allStocksData = stocksData\r\n    const [searchQuery, setSearchQuery] = useState(\"\")\r\n    const [searchedData, setSearchedData] = useState([])\r\n\r\n    // const fetchStocksData = async () => {\r\n    //     let localStocksData = []\r\n    //     let reference = await firestore.collection('StocksData').get()\r\n    //     reference.forEach(item => {\r\n    //         localStocksData.push(item.data())\r\n    //     })\r\n    //     setStocksData(localStocksData)\r\n    // }\r\n\r\n    useEffect(() => {\r\n        console.log(22, allStocksData.length)\r\n    },[])\r\n\r\n    const handleSearchQueryChange = e => {\r\n        let query = e.target.value\r\n        setSearchQuery(query)\r\n\r\n        if(query.length > 0) {\r\n            const filteredItems = allStocksData.filter(item => (item.SYMBOL.toLowerCase().startsWith(query.toLowerCase()) || item['NAME OF COMPANY'].toLowerCase().startsWith(query.toLowerCase())))\r\n            setSearchedData(filteredItems)\r\n            // console.log(32, filteredItems)\r\n        } else {\r\n            setSearchedData([])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"searchBlock\">\r\n                <input type=\"text\" placeholder=\"Search for a stock...\" className=\"searchBox\" onChange={handleSearchQueryChange} value={searchQuery}/>\r\n            </div>\r\n            <div>\r\n                { searchedData.length>0 && \r\n                    searchedData.map((item, index) => {\r\n                        return (\r\n                            <div key={index}>\r\n                                <Link to={\"/stocks/\"+item.SYMBOL} target=\"_blank\" className=\"stockRedirectLink\">{ item.SYMBOL }- { item['NAME OF COMPANY'] }</Link>\r\n                            </div>\r\n                        )\r\n                    })    \r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;",["53","54"],"F:\\projects\\React\\buyorsell\\src\\Components\\Home\\Home.js",[],"F:\\projects\\React\\buyorsell\\src\\FirebaseFunctions\\firebase.utils.js",[],"F:\\projects\\React\\buyorsell\\src\\reportWebVitals.js",[],"F:\\projects\\React\\buyorsell\\src\\stocksData.js",[],["55","56"],"F:\\projects\\React\\buyorsell\\src\\Components\\StockDetailPage\\StockDetailsPage.js",["57"],"F:\\projects\\React\\buyorsell\\src\\index.js",[],"F:\\projects\\React\\buyorsell\\src\\Components\\ChatComponent\\ChatComponent.js",["58","59"],"import React,{ useState, useEffect, createRef } from \"react\"\r\nimport firebase from \"firebase/app\";\r\nimport { firestore } from \"../../FirebaseFunctions/firebase.utils\"\r\n// import { IoIosArrowDropup } from \"react-icons/io\"\r\n\r\nimport \"./ChatComponent.css\"\r\n\r\nconst ChatComponent = ({ stockName }) => {\r\n    \r\n    const [currentMessage, setCurrentMessage] = useState(\"\")\r\n    const [allMessages, setAllMessages] = useState([])\r\n\r\n\r\n    //This ref is attached to the div in chatMessage block below\r\n    const messagesEndRef = createRef()\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    },[allMessages])\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n    //End of ref\r\n\r\n    // //Start ref\r\n    // const messageStartRef = createRef()\r\n\r\n    // const scrollTop = () => {\r\n    //     messageStartRef.current.scrollIntoView({ behavior: 'smooth' })\r\n    // }\r\n    // //End of the start ref\r\n    \r\n    const handleMessageChange = e => {\r\n        let message = e.target.value\r\n        setCurrentMessage(message)\r\n    }\r\n\r\n    const handleSendMessage = async () => {\r\n        setAllMessages([...allMessages, currentMessage])\r\n        setCurrentMessage(\"\")\r\n\r\n        await firestore.doc(`/stockDetails/${stockName}`).update({\r\n            chatMessages : firebase.firestore.FieldValue.arrayUnion(currentMessage)\r\n        })\r\n    }\r\n    \r\n    const getMessagesFromFirestore = async () => {\r\n        \r\n        //Retrieving the messages on page load\r\n        let reference = await firestore.collection('stockDetails').where('stockName','==',stockName).get()\r\n        reference.forEach(item => {\r\n            setAllMessages(item.data().chatMessages)\r\n        })\r\n\r\n        //Retrieving the messages on every snapshot change\r\n        firestore.collection('stockDetails').where('stockName','==', stockName).onSnapshot(querySnapshot => {\r\n            querySnapshot.docChanges().forEach(change => {\r\n                setAllMessages(change.doc.data().chatMessages)\r\n              });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMessagesFromFirestore()\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"chatBlock\">\r\n                <p className=\"chatTitle\">{stockName} discussion</p>\r\n                <div className=\"chatMessages\">\r\n                    {/* <div ref={messageStartRef} /> */}\r\n                    {allMessages && allMessages.map((message, index) => {\r\n                        return (\r\n                            <div key={index} className=\"singleMessage\">\r\n                                <p>{message}</p>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    {/* <button onClick={scrollTop} className=\"goTopButton\"><IoIosArrowDropup /></button> */}\r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n                <div className=\"chatSendBlock\">\r\n                    <input type=\"text\" placeholder=\"enter your message here\" onChange={handleMessageChange} value={currentMessage} className=\"chatSendBlock-input\"/>\r\n                    <button onClick={handleSendMessage} className=\"chatSendBlock-send\">Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatComponent;","F:\\projects\\React\\buyorsell\\src\\Components\\GraphComponent\\GraphComponent.js",["60","61","62","63","64","65","66"],"import React, { useState, useEffect } from \"react\";\r\nimport DonutChart from 'react-donut-chart';\r\nimport { createStockDocument , firestore } from \"../../FirebaseFunctions/firebase.utils\";\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nimport \"./GraphComponent.css\"\r\n\r\nconst GraphComponent = ({ stockName }) => {\r\n\r\n    const [userChoiceFromStorage, setUserChoiceFromStorage] = useState({})\r\n    const [buttonClicked, setButtonClicked] = useState(false)\r\n    const [buyValue, setBuyValue] = useState(0)\r\n    const [sellValue, setSellValue] = useState(0)\r\n    const [holdValue, setHoldValue] = useState(0)\r\n    const [userChoice, setUserChoice] = useState([])\r\n\r\n    const { addToast } = useToasts()\r\n\r\n    useEffect(() => {\r\n        createStockDocument(stockName)\r\n    },[])\r\n\r\n    const [sessionId, setSessionId] = useState(\"\")\r\n    //Session ID code block ----- CAN BE REMOVED\r\n        const generateSessionId = () => {\r\n            const now = new Date()\r\n\r\n            setSessionId(now.getTime())\r\n        }\r\n\r\n        useEffect(() => {\r\n            generateSessionId()\r\n            console.log(19, sessionId)\r\n        },[])\r\n\r\n        useEffect(() => {\r\n            const interval = setInterval(() => {\r\n                generateSessionId()\r\n            },[90000])\r\n\r\n            return () => clearInterval(interval)\r\n        },[])\r\n    //End of sessionid block\r\n\r\n    const getPercentDetailsFirestore = async () => {\r\n\r\n            let reference = await firestore.collection('stockDetails').where('stockName','==',stockName).get()\r\n            reference.forEach(item => {\r\n                setBuyValue(item.data().buyPercent)\r\n                setSellValue(item.data().sellPercent)\r\n                setHoldValue(item.data().holdPercent)\r\n            })\r\n\r\n            //Retrieving the chart data on every snapshot change\r\n            firestore.collection('stockDetails').where('stockName','==', stockName).onSnapshot(querySnapshot => {\r\n                querySnapshot.docChanges().forEach(change => {\r\n                    setBuyValue(change.doc.data().buyPercent)\r\n                    setSellValue(change.doc.data().sellPercent)\r\n                    setHoldValue(change.doc.data().holdPercent)\r\n                });\r\n            })        \r\n    }\r\n\r\n    //This is to update the page on the page load\r\n    useEffect(() => {\r\n        getPercentDetailsFirestore()\r\n    },[])\r\n\r\n    const notify = () => addToast(\"Duplicate vote!\\nTry choosing other options if you change you view about this stock\", { appearance : 'error', autoDismiss: true })\r\n\r\n    const handleBuySellHoldButtonClick = async e => {\r\n        \r\n        let buttonValue = e.target.value\r\n        console.log(47, e.target.className)\r\n        let buttonClassName = e.target.className\r\n        if(buttonClassName.split(\" \").includes(\"disabled\")) {\r\n            notify()\r\n        } else {\r\n            if(buttonValue === \"Buy\") {\r\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\r\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n                    console.log(140, oldValueInLocalStorage)\r\n\r\n                    //Checking for the old choice\r\n                    oldValueInLocalStorage.action === \"SELL\"\r\n                        ?\r\n                    (await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue - 1\r\n                    }))\r\n                        :\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue - 1\r\n                    })\r\n                    //End of check\r\n\r\n                    setBuyValue(buyValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'BUY', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                } else {\r\n                    setBuyValue(buyValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'BUY', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)                    \r\n                }\r\n                \r\n            } else if(buttonValue === \"Sell\") {\r\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\r\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n                    console.log(140, oldValueInLocalStorage)\r\n\r\n\r\n                    //Checking for the old choice\r\n                    oldValueInLocalStorage.action === \"BUY\"\r\n                        ?\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue - 1\r\n                    })\r\n                        :\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue - 1\r\n                    })\r\n                    //End of check\r\n\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'SELL', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                } else {\r\n                    setSellValue(sellValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'SELL', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                }\r\n                \r\n                \r\n            } else {                \r\n                if(localStorage.getItem(`STOCK-${stockName}`)) {\r\n                    let oldValueInLocalStorage = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n                    console.log(140, oldValueInLocalStorage)\r\n\r\n                    //Checking for the old choice\r\n                    oldValueInLocalStorage.action === \"BUY\" \r\n                        ? \r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        buyPercent : buyValue - 1\r\n                    })\r\n                        :\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        sellPercent : sellValue - 1\r\n                    })\r\n                    //End of check\r\n\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'HOLD', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                } else {\r\n                    // setHoldValue(holdValue + 1)\r\n                    localStorage.setItem(`STOCK-${stockName}`,JSON.stringify({stockName: stockName , action: 'HOLD', sessionId: sessionId , expiry: new Date().getTime() + 90000}))\r\n\r\n                    await firestore.doc(`/stockDetails/${stockName}`).update({\r\n                        holdPercent : holdValue + 1\r\n                    })\r\n                    setButtonClicked(true)\r\n                    setButtonClicked(false)\r\n                }\r\n                \r\n            }\r\n        }\r\n        setButtonClicked(false)   \r\n    }\r\n\r\n    //Deleting elements from localstorage based on the expiry key\r\n    const deleteFromLocalStorage = () => {\r\n        \r\n        console.log(\"Starting\", 205)\r\n        let stockListFromLocalStorage = []\r\n\r\n        for(let i in localStorage){\r\n            if(i.startsWith(\"STOCK\")) {\r\n                stockListFromLocalStorage.push(i)\r\n            }\r\n        }\r\n        if(stockListFromLocalStorage.length > 0) {\r\n            stockListFromLocalStorage.forEach(item => {\r\n                if(JSON.parse(localStorage[item]).expiry < new Date().getTime() ) {\r\n                    localStorage.removeItem(item)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            deleteFromLocalStorage()\r\n        },60000)\r\n\r\n        return () => clearInterval(interval)\r\n    },[])\r\n\r\n\r\n    //GETTING USER CHOICE FROM LOCAL STORAGE\r\n    const getUserChoiceFromStorage = () => {\r\n        let storageData = JSON.parse(localStorage.getItem(`STOCK-${stockName}`))\r\n        setUserChoiceFromStorage(storageData)  // SETUSERCHOICE IS A STATE CONTAINER; GETUSERCHOICE IS A FUNCTION\r\n    }\r\n\r\n    useEffect(() => {\r\n        let storageData = localStorage.getItem(`STOCK-${stockName}`)\r\n        if(!storageData) {\r\n            setUserChoiceFromStorage({})\r\n        } else {\r\n            setUserChoiceFromStorage(JSON.parse(storageData))\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(buttonClicked) {\r\n            getUserChoiceFromStorage()\r\n        }\r\n    },[buttonClicked])\r\n \r\n    const totalValue = buyValue + sellValue + holdValue\r\n\r\n    const buyPercent = buyValue > 0 ? parseFloat(((buyValue/totalValue)* 100).toFixed(2)) :  0\r\n    const sellPercent = sellValue > 0 ? parseFloat(((sellValue/totalValue)* 100).toFixed(2)) : 0\r\n    const holdPercent = holdValue > 0 ? parseFloat(((holdValue/totalValue)* 100).toFixed(2)) : 0\r\n\r\n    let displayBuyButton = \r\n        (userChoiceFromStorage.stockName !== stockName \r\n            || \r\n        ((userChoiceFromStorage.action !== \"BUY\" ) && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\r\n        ? true : false\r\n    \r\n    let displaySellButton = \r\n        (userChoiceFromStorage.stockName !== stockName \r\n            || \r\n        ((userChoiceFromStorage.action !== \"SELL\") && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\r\n        ? true : false\r\n\r\n    let displayHoldButton = \r\n        (userChoiceFromStorage.stockName !== stockName \r\n            || \r\n        ((userChoiceFromStorage.action !== \"HOLD\") && (userChoiceFromStorage.stockName === stockName || !userChoiceFromStorage.stockName )))\r\n        ? true : false\r\n\r\n    return (\r\n        <div>\r\n                    {/* Donut chart */}\r\n                    <DonutChart \r\n                        data = {[\r\n                            {\r\n                                label: 'Buy',\r\n                                value: buyPercent\r\n                            },\r\n                            {\r\n                                label: 'Sell',\r\n                                value: sellPercent\r\n                            },\r\n                            {\r\n                                label: 'Hold',\r\n                                value: holdPercent\r\n                            }\r\n                        ]}\r\n                        colors = {['#2a9d8f' , '#e76f51', '#e9c46a']}\r\n                        onMouseEnter = {() => false}\r\n                    />\r\n                    <div className=\"buttonBlock\"> \r\n                        <button onClick={handleBuySellHoldButtonClick} value=\"Buy\" className={displayBuyButton ? \"buyButton\" : \"buyButton disabled\"}>Buy</button>\r\n\r\n                        <button onClick={handleBuySellHoldButtonClick} value=\"Sell\" className={displaySellButton ? \"sellButton\" : \"sellButton disabled\"}>Sell</button>\r\n\r\n                        <button onClick={handleBuySellHoldButtonClick} value=\"Hold\" className={displayHoldButton ? \"holdButton\" : \"holdButton disabled\"}>Hold</button>\r\n\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default GraphComponent;","F:\\projects\\React\\buyorsell\\src\\Components\\ErrorComponent\\ErrorComponent.js",[],{"ruleId":"67","severity":1,"message":"68","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":19},{"ruleId":"71","severity":1,"message":"72","line":26,"column":7,"nodeType":"73","endLine":26,"endColumn":9,"suggestions":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"75","replacedBy":"79"},{"ruleId":"77","replacedBy":"80"},{"ruleId":"71","severity":1,"message":"81","line":28,"column":7,"nodeType":"73","endLine":28,"endColumn":9,"suggestions":"82"},{"ruleId":"71","severity":1,"message":"83","line":19,"column":7,"nodeType":"73","endLine":19,"endColumn":20,"suggestions":"84"},{"ruleId":"71","severity":1,"message":"85","line":66,"column":7,"nodeType":"73","endLine":66,"endColumn":9,"suggestions":"86"},{"ruleId":"67","severity":1,"message":"87","line":15,"column":12,"nodeType":"69","messageId":"70","endLine":15,"endColumn":22},{"ruleId":"67","severity":1,"message":"88","line":15,"column":24,"nodeType":"69","messageId":"70","endLine":15,"endColumn":37},{"ruleId":"71","severity":1,"message":"89","line":21,"column":7,"nodeType":"73","endLine":21,"endColumn":9,"suggestions":"90"},{"ruleId":"71","severity":1,"message":"91","line":34,"column":11,"nodeType":"73","endLine":34,"endColumn":13,"suggestions":"92"},{"ruleId":"71","severity":1,"message":"93","line":67,"column":7,"nodeType":"73","endLine":67,"endColumn":9,"suggestions":"94"},{"ruleId":"71","severity":1,"message":"89","line":229,"column":7,"nodeType":"73","endLine":229,"endColumn":9,"suggestions":"95"},{"ruleId":"71","severity":1,"message":"96","line":235,"column":7,"nodeType":"73","endLine":235,"endColumn":22,"suggestions":"97"},"no-unused-vars","'firestore' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allStocksData.length'. Either include it or remove the dependency array.","ArrayExpression",["98"],"no-native-reassign",["99"],"no-negated-in-lhs",["100"],["99"],["100"],"React Hook useEffect has missing dependencies: 'allStocks', 'props.history', and 'props.match.params.stockName'. Either include them or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array.",["102"],"React Hook useEffect has a missing dependency: 'getMessagesFromFirestore'. Either include it or remove the dependency array.",["103"],"'userChoice' is assigned a value but never used.","'setUserChoice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stockName'. Either include it or remove the dependency array.",["104"],"React Hook useEffect has a missing dependency: 'sessionId'. Either include it or remove the dependency array.",["105"],"React Hook useEffect has a missing dependency: 'getPercentDetailsFirestore'. Either include it or remove the dependency array.",["106"],["107"],"React Hook useEffect has a missing dependency: 'getUserChoiceFromStorage'. Either include it or remove the dependency array.",["108"],{"desc":"109","fix":"110"},"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"117","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [allStocksData.length]",{"range":"126","text":"127"},"Update the dependencies array to be: [allStocks, props.history, props.match.params.stockName]",{"range":"128","text":"129"},"Update the dependencies array to be: [allMessages, scrollToBottom]",{"range":"130","text":"131"},"Update the dependencies array to be: [getMessagesFromFirestore]",{"range":"132","text":"133"},"Update the dependencies array to be: [stockName]",{"range":"134","text":"135"},"Update the dependencies array to be: [sessionId]",{"range":"136","text":"137"},"Update the dependencies array to be: [getPercentDetailsFirestore]",{"range":"138","text":"139"},{"range":"140","text":"135"},"Update the dependencies array to be: [buttonClicked, getUserChoiceFromStorage]",{"range":"141","text":"142"},[812,814],"[allStocksData.length]",[761,763],"[allStocks, props.history, props.match.params.stockName]",[591,604],"[allMessages, scrollToBottom]",[2125,2127],"[getMessagesFromFirestore]",[782,784],"[stockName]",[1136,1138],"[sessionId]",[2380,2382],"[getPercentDetailsFirestore]",[9709,9711],[9825,9840],"[buttonClicked, getUserChoiceFromStorage]"]